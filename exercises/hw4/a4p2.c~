// Fig. 7.24: fig07_24.c
// Card shuffling and dealing.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SUITS 4
#define FACES 13
#define CARDS 52

// prototypes
void shuffle(unsigned int wDeck[][FACES]); // shuffling modifies wDeck
void deal(unsigned int wDeck[][FACES], const char *wFace[], 
	  const char *wSuit[]); // dealing doesn't modify the arrays

// my own functions here
void highCard(unsigned int wDeck[][FACES], const char *wFace[],
	      const char *wSuit[]);
void twoPair(unsigned int wDeck[][FACES], const char *wFace[],
              const char *wSuit[]);
void threeOfKind(unsigned int wDeck[][FACES], const char *wFace[], const char *wSuit[]);

void firstFive(unsigned int wDeck[][FACES], const char *wFace[], const char *\
	       wSuit[]);

int main(void)
{
  // initialize deck array
  unsigned int deck[SUITS][FACES] = { 0 };

  srand(time(NULL)); // seed random-number generator

  shuffle(deck); // shuffle the deck

  // initialize suit array                       
   const char *suit[SUITS] =            
     {"Hearts", "Diamonds", "Clubs", "Spades"};
   
   // initialize face array                   
   const char *face[FACES] =
     {"Ace", "Deuce", "Three", "Four",         
      "Five", "Six", "Seven", "Eight",         
      "Nine", "Ten", "Jack", "Queen", "King"};

   deal(deck, face, suit); // deal the deck
   firstFive(deck, face, suit);
}

// shuffle cards in deck
void shuffle(unsigned int wDeck[][FACES])
{
  size_t card = 1;
  // for each of the cards, choose slot of deck randomly
  for (card = 1; card <= CARDS; ++card) {
    size_t row; // row number
    size_t column; // column number

    // choose new random location until unoccupied slot found
    do {                                                        
      row = rand() % SUITS;                                   
      column = rand() % FACES;                             
    } while(wDeck[row][column] != 0); // end do...while

    // place card number in chosen slot of deck
    wDeck[row][column] = card;
  } 
  return;
}


// deal cards in deck
void deal(unsigned int wDeck[][FACES], const char *wFace[],
	  const char *wSuit[])
{
  // deal each of the cards
  size_t card = 1;
  size_t row = 0;
  size_t column = 0;
  // added
  int cardnum = 1;
  for (card = 1; card <= CARDS; ++card) {
    // loop through rows of wDeck
    for (row = 0; row < SUITS; ++row) {
      // loop through columns of wDeck for current row
      for (column = 0; column < FACES; ++column) {
	// if slot contains current card, display card
	if (wDeck[row][column] == card) {
	  printf("%d - ", cardnum);
	  printf("%5s of %-8s%c", wFace[column], wSuit[row],
		 card % 2 == 0 ? '\n' : '\t'); // 2-column format
	  cardnum++;
	} 
      } 
    } 
  } 
  return;
}

void firstFive(unsigned int wDeck[][FACES], const char *wFace[],
	       const char *wSuit[]){
  int i = 0;
  for(i = 0; i < 5; i++){
    printf("\n %d -%5s of %-8s%c",i,  wFace[i], wSuit[i]);
  }
  return;
}
